//
// str-replace
// Replace occurrence of a string
//
// Parameters:
// {String} $string : String containing the word to replace
// {String, Map} $search : word to replace , if map is supplied key(s) contain string to replace and value(s) contain string to replace with
// [optional] {String} $replace : String to replace with, if $search is a string
//
// Example of use:
// $result: str-replace('This is just an example', 'just', 'not') => $result: This is not an example
// $result: str-replace("This is just an example", ("just":"not", "an":"a", "example":"joke")) => $result: This is not a joke
//
// Return:
// {String} String with replaced words
//
@function str-replace($string, $search, $replace: " ") {
  @if type-of($string) != "string" {
    @error "The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `string` is required!";
  } @else if type-of($search) != "string" and type-of($search) != "map" {
    @error "The argument $search: `#{$search}` is of incorrect type: `#{type-of($search)}`. Type of `string` or `map` is required!";
  } @else if type-of($replace) != "string" and type-of($search) != "map" {
    @error "The argument $replace: `#{$replace}` is of incorrect type: `#{type-of($replace)}`. Type of `string` is required!";
  }

  @if type-of($search) == "map" {
    $result: $string;
    @each $key, $value in $search {
      $result: str-replace($result, $key, $value);
    }
    @return $result;
  }

  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
