//
// Generate Style
//

//
// generate-style
// used to quickly create style based on options inside $config.
//
// Parameters:
// {Map} $config - Map containing options to generate style from
//
// Options:
// The $config map contains following options:
//
// {String,List,Map} `properties`:
// properties to generate style for. When some property supplied as Map its value remains constant in all styles
// (Keys) property name.
// (values) property value.
//
// {String,List,Map} `values`:
// (Keys) are used in combination with selector option to generate unique selector. null keys can be used to avoid unique selector.
// (values) to be Used for properties.
//
// {String} `selector`:
// selector for generated style. Empty string in combination with `disable-prefix-values-keys` option can be to generate selector
// totally based on values.
//
// [optional] {String,List,Map} `infixes`:
// (values) used to suffix properties
// (keys) used to infix selector option and values option
//
// [optional] {Boolean} `responsive`:
// generate responsive styles inside media query.
//
// [optional] {Boolean} `reverse-responsive`:
// invert the responsive media query to be applied below the value.
//
// [optional] {Boolean} `enable-important-values`:
// Use !important for values.
//
// [optional] {Boolean} `disable-prefix-values-keys`:
// disable prefixing keys inside values options.
// Mostly used to disable prefixing when null selector option is used because without this options result selector leads to
// dash `-` in selector start
//
// [optional] {Boolean} `disable-prefix-infixes-keys`:
// disable prefixing keys inside infixes options.
// Mostly used to disable prefixing when infixes are merged with selector e.g mx-*, where m is selector x is infix and -* is values
//
// [optional] {Boolean} `disable-prefix-infixes-values`:
// disable prefixing values inside infixes options.
// Mostly used to disable prefixing when only infixes option values are used as a property with empty properties option
//
//
// Example:
//
// $config: (
//   properties: box-shadow,
//   selector: shadow,
//   values: (
//     sm: 1px 1px 3px 0 rgba($black, .075),
//     null: 1px 4px 6px 0 rgba($black, .15),
//     lg: 2px 10px 15px 0 rgba($black, .175),
//     round: 0 5px 15px rgba($black, .15),
//     none: none
//   ),
//   enable-important-values: true
// );
//
// @include generate-style($config);
//
// Output:
//
// .shadow-sm { box-shadow: 1px 1px 3px 0 rgba(0, 0, 0, .075) !important; }
// .shadow { box-shadow: 1px 4px 6px 0 rgba(0, 0, 0, .15) !important; }
// .shadow-lg { box-shadow: 2px 10px 15px 0 rgba(0, 0, 0, .175) !important; }
// .shadow-round { box-shadow: 0 5px 15px rgba(0, 0, 0, .15) !important; }
// .shadow-none { box-shadow: none !important; }
//
@mixin generate-style($config) {
  $responsive: map-has-key($config, "responsive") and map-get($config, "responsive") == true;
  $reverse-responsive: map-has-key($config, "reverse-responsive") and map-get($config, "reverse-responsive") == true;

  @each $breakpoint in map-keys( if($responsive, $breakpoints, (null: null)) ) {
    @if $reverse-responsive {
      @include media-breakpoint-below($breakpoint) {
        @include _generate-style-mixin($config, $breakpoint);
      }
    } @else {
      @include media-breakpoint-above($breakpoint) {
        @include _generate-style-mixin($config, $breakpoint);
      }
    }
  }
}

// Mixin just to remove redundant block of code
@mixin _generate-style-mixin($config, $breakpoint) {
  $properties: map-get($config, "properties");
  $values: to-map(map-get($config, "values"));
  $selector: map-get($config, "selector");
  $infixes: map-has-key($config, "infixes") and map-get($config, "infixes");
  $reverse-responsive: map-has-key($config, "reverse-responsive") and map-get($config, "reverse-responsive") == true;
  $enable-important-values: map-has-key($config, "enable-important-values") and map-get($config, "enable-important-values");
  $disable-prefix-values-keys: map-has-key($config, "disable-prefix-values-keys") and map-get($config, "disable-prefix-values-keys");
  $disable-prefix-infixes-keys: map-has-key($config, "disable-prefix-infixes-keys") and map-get($config, "disable-prefix-infixes-keys");
  $disable-prefix-infixes-values: map-has-key($config, "disable-prefix-infixes-values") and map-get($config, "disable-prefix-infixes-values");

  $breakpoint-suffix: prefix(name-breakpoint($breakpoint), "\\"+ if($reverse-responsive, $breakpoints-below-prefix, $breakpoints-above-prefix));
  $infixes: to-map(if($infixes, $infixes, null));
  @each $infix-key, $infix-value in $infixes {
    @if not $disable-prefix-infixes-keys {
      $infix-key: prefix($infix-key, "-");
    }

    @if not $disable-prefix-infixes-values {
      $infix-value: prefix($infix-value, "-");
    }

    @each $key, $value in $values {
      @if not $disable-prefix-values-keys {
        $key: prefix($key, "-");
      }

      .#{$selector}#{$infix-key}#{$key}#{$breakpoint-suffix} {
        @each $property in $properties {
          @if type-of($property) != string and type-of($property) != map {
            @error "The $property:`#{$property}` inside $properties: `#{$properties}` for $selector: `#{$selector}` is of incorrect type: `#{type-of($property)}`. Type of `string` or `map` is required!";
          }

          $enable-important-values: if($enable-important-values, !important, null);

          @if type-of($property) == string {
            #{$property}#{$infix-value}: $value $enable-important-values;
          } @else {
            @each $key, $value in $property {
              #{$key}#{$infix-value}: $value $enable-important-values;
            }
          }
        }
      }
    }
  }
}
