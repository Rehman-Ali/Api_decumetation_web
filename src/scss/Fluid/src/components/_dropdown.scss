//
// Dropdown
//

@if $generate-component-classes {
  .dropdown {
    @extend %position-relative;
    @extend %display-inlineblock;

    > .menu {
      position: absolute;
      top: 100%;
      z-index: $dropdown-menu-zindex;
      display: none; // Hide menu to display over interaction
      min-width: $dropdown-menu-minwidth;
      padding: $dropdown-menu-padding-y 0;
      margin-top: $dropdown-menu-margin;
      border-radius: border-radius($dropdown-menu-borderradius);
      background-color: $dropdown-menu-background;
      box-shadow: box-shadow($dropdown-menu-boxshadow);
      @include fontsize(inherit);
      @include animation(fadein, $nestedMenu-animationduration);
    }

    .dropdown {
      width: 100%; // expend nested dropdown available space
    }

    &:not(.is-mega) {
      .menu-item {
        white-space: nowrap; // prevent wrapping of text
      }
    }
  }

  // its recommended to use JavaScript for Implementation of dropdown but is optional
  // Following JavaScript Code implements dropdown interaction and work with major Latest Browsers
  //
  // var dropdowntriggers = document.getElementsByClassName("dropdown-trigger");
  // Object.keys(dropdowntriggers).forEach(function (k) {
  //   dropdowntriggers[k].onclick = function (e) {
  //     e.target.classList.toggle("active");
  //   };
  // });
  //
  .dropdown-trigger {
    @include fontsize(inherit);
    display: inline-flex;

    @include after {
      content: "";
      transform: translateX($dropdown-trigger-caret-size / 2); // using transform in combination with margin-right to offset when parent element has display inline-block, because we have already used margin-left value for flex parent element having display flex
      align-self: center; // align at middle when parent element has display flex e.g .menu-item
      margin-right: $dropdown-trigger-caret-size / 2; // using transform in combination with margin-right to offset when parent element has display inline-block, because we have already used margin-left value for flex parent element having display flex
      margin-left: auto; // align at end when parent element has display flex e.g .menu-item
      @include triangle(bottom, $dropdown-trigger-caret-size, $dropdown-trigger-caret-color);
    }

    &.active ~ .menu {
      @extend %display-block; // Show menu when active
    }
  }

  //
  // Dropdown menu direction
  //
  .dropdown.is-up {
    > .menu {
      top: auto;
      bottom: 100%;
      margin: 0 0 $dropdown-menu-margin 0;
    }

    > .dropdown-trigger {
      @include after {
        transform: scale(-1) translateX(-$dropdown-trigger-caret-size / 2);
      }
    }
  }

  .dropdown.is-right {
    > .menu {
      top: 0;
      left: 100%;
      margin: 0 0 0 $dropdown-menu-margin;
    }

    > .dropdown-trigger {
      @include after {
        transform: rotate(270deg) translateY($dropdown-trigger-caret-size / 2);
      }
    }
  }

  .dropdown.is-left {
    > .menu {
      top: 0;
      right: 100%;
      margin: 0 $dropdown-menu-margin 0 0;
    }

    > .dropdown-trigger {
      @include after {
        transform: rotate(90deg) translateY(-$dropdown-trigger-caret-size / 2);
      }
    }
  }

  //
  // Pure CSS approach/interaction
  //
  // Css approach works fine with simple dropdown but they are not recommended for complex structure and they break UX
  // e.g When used with mega dropdown inside .lyt-header, menu closes before user can interact with it. its because
  // as soon as user moves cursor to interact with menu he loses .dropdown hover state and menu closes.
  .dropdown.on-hover {
    // to interact with nested menu
    .dropdown {
      @include hover {
        > .menu {
          @extend %display-block;
        }
      }

      // Prevent dropdown from closing between gaps by creating additional area around dropdown
      > .menu {
        @include before {
          @extend %dropdown-fill-gaps;
        }
      }
    }

    // to interact with inner menu
    @include hover {
      > .menu {
        @extend %display-block;
      }
    }

    // Prevent dropdown from closing between gaps by creating additional area around dropdown
    > .menu {
      @include before {
        @extend %dropdown-fill-gaps;
      }
    }
  }

  //
  // Dropdown Mega
  //
  .dropdown.is-mega {
    position: static;

    > .menu {
      right: 0;
      left: 0;
      margin: 0;
    }
  }
}
